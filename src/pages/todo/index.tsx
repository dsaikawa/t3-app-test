import Head from "next/head";
import { api } from "~/utils/api";
import {
  Center,
  TextInput,
  Title,
  Button,
  Box,
  Group,
  Card,
  Text,
  Menu,
  ActionIcon,
  Container,
  Skeleton,
  SimpleGrid,
  Modal,
  useMantineTheme,
} from "@mantine/core";
import { useForm } from "@mantine/form";
import { changeStatusToDone, type IGetTaskByIdResult } from "~/db/todo.queries";
import { IconTrash, IconCheck, IconPlus } from "@tabler/icons-react";
import { useDisclosure } from "@mantine/hooks";
import { useState } from "react";

export default function Todo() {
  const { data, refetch } = api.todo.getTodo.useQuery(undefined, {});
  const addTaskHooks = api.todo.addTodo.useMutation();
  const deleteTaskHooks = api.todo.deleteTodo.useMutation();
  const moveToDoneHooks = api.todo.changeStatusToDone.useMutation();

  const [opened, { open, close }] = useDisclosure(false);
  const theme = useMantineTheme();

  const [taskInput, setTaskInput] = useState("");

  const form = useForm({
    initialValues: {
      task: "",
    },
  });

  const Task = (tasks: IGetTaskByIdResult) => {
    const { id, task, status } = tasks;
    return (
      <Card withBorder pl="sm" px="md" radius="md" w={400}>
        <Group position="apart">
          <Text w={"80%"} truncate>
            {task}
          </Text>
          <Menu withinPortal position="bottom-end" shadow="sm">
            <Menu.Target>
              <ActionIcon
                onClick={() => {
                  (status === "READY" ? moveToDoneHooks : deleteTaskHooks)
                    .mutateAsync(id)
                    .then(() => {
                      refetch().catch((e) => {
                        console.log(e);
                      });
                    })
                    .catch((e) => {
                      console.log(e);
                    });
                }}
              >
                {status === "READY" ? (
                  <IconCheck size="1rem" />
                ) : (
                  <IconTrash size="1rem" />
                )}
              </ActionIcon>
            </Menu.Target>
          </Menu>
        </Group>
      </Card>
    );
  };

  const AddTaskModal = () => {
    return (
      <>
        <Modal
          opened={opened}
          onClose={close}
          title="タスク追加"
          overlayProps={{
            color:
              theme.colorScheme === "dark"
                ? theme.colors.dark[9]
                : theme.colors.gray[2],
            opacity: 0.55,
            blur: 3,
          }}
          centered
        >
          <TextInput
            placeholder="タスクを入力"
            radius="md"
            size="md"
          ></TextInput>
          <Group position="center" my={15}>
            <Button
              type="button"
              variant="outline"
              radius="md"
              size="md"
              disabled={form.values.task === ""}
              onClick={() => {
                addTaskHooks
                  .mutateAsync(form.values.task)
                  .then(() => {
                    refetch().catch((e) => {
                      console.log(e);
                    });
                  })
                  .catch((e) => {
                    console.log(e);
                  });
                form.reset();
                setTaskInput("");
              }}
            >
              追加
            </Button>
            <Button
              type="button"
              variant="outline"
              radius="md"
              size="md"
              color="red"
              onClick={() => {
                form.reset();
                setTaskInput("");
                close();
              }}
            >
              キャンセル
            </Button>
          </Group>
        </Modal>
      </>
    );
  };

  return (
    <>
      <Head>
        <title>About Me</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Center>
        <Title
          order={1}
          color="blue.5"
          variant="gradient"
          gradient={{ from: "teal", to: "blue", deg: 105 }}
          mt={50}
        >
          TODO LIST
        </Title>
      </Center>

      <Container my={30}>
        <SimpleGrid
          cols={2}
          spacing="md"
          breakpoints={[{ maxWidth: "sm", cols: 1 }]}
        >
          <Card withBorder radius={"md"}>
            <Group position="center" maw={400} mx="auto">
              <Title order={3}>READY</Title>
              <Button
                onClick={open}
                variant="outline"
                radius="md"
                size="xl"
                w={400}
              >
                <Center>
                  <Text>ADD TASK</Text>
                  <IconPlus size={"1.2rem"} />
                </Center>
              </Button>
              {data
                ? data
                    .filter((t) => {
                      return t.status === "READY";
                    })
                    .map((t) => {
                      return (
                        <Task
                          id={t.id}
                          task={t.task}
                          status={t.status}
                          key={t.id}
                        ></Task>
                      );
                    })
                : []}
            </Group>
          </Card>
          <Card withBorder radius="md">
            <Group position="center" maw={400} mx="auto">
              <Title order={3}>DONE</Title>
              {data
                ? data
                    .filter((t) => {
                      return t.status === "DONE";
                    })
                    .map((t) => {
                      return (
                        <Task
                          id={t.id}
                          task={t.task}
                          status={t.status}
                          key={t.id}
                        ></Task>
                      );
                    })
                : []}
            </Group>
          </Card>
        </SimpleGrid>
      </Container>
      <Modal
        opened={opened}
        onClose={close}
        title="タスク追加"
        overlayProps={{
          color:
            theme.colorScheme === "dark"
              ? theme.colors.dark[9]
              : theme.colors.gray[2],
          opacity: 0.55,
          blur: 3,
        }}
        centered
      >
        <TextInput
          placeholder="タスクを入力"
          radius="md"
          data-autofocus
          size="md"
          {...form.getInputProps("task")}
        ></TextInput>
        <Group position="center" my={15}>
          <Button
            type="button"
            variant="outline"
            radius="md"
            size="md"
            disabled={form.values.task === ""}
            onClick={() => {
              addTaskHooks
                .mutateAsync(form.values.task)
                .then(() => {
                  refetch()
                    .then(() => {
                      form.reset();
                      close();
                    })
                    .catch((e) => {
                      console.log(e);
                    });
                })
                .catch((e) => {
                  console.log(e);
                });
            }}
          >
            追加
          </Button>
          <Button
            type="button"
            variant="outline"
            radius="md"
            size="md"
            color="red"
            onClick={() => {
              form.reset();
              setTaskInput("");
              close();
            }}
          >
            キャンセル
          </Button>
        </Group>
      </Modal>
    </>
  );
}
